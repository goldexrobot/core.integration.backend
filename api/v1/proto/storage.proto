syntax = "proto3";

package core.backend.integration.api.v1.storage;

option go_package="github.com/goldexrobot/core.integration/api/v1/golang/storage/storage;storage";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// import "validate/validate.proto"; // https://github.com/envoyproxy/protoc-gen-validate#constraint-rules

service Storage {
	// Get occupied storage cells for the bot specified by ID
	rpc State(StateRequest) returns (StateResponse) {
		option (google.api.http) = {
			get: "/v1/storage/{bot_id}/state";
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			operation_id: "state";
		};
	}
}

message StateRequest {
	// Bot ID
	uint64 bot_id = 1;
}

message StateResponse {
	option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        example: '{"occupiedCells": { "A1": "<OccupiedCell>", "B6": "<OccupiedCell>" }, "total": -1, "available": -1 }';
    };

	// Occupied cells
	map<string,OccupiedCell> occupied_cells = 1;
	// Total available cells or -1 if unknown
	int32 total = 2;
	// Available (free) cells or -1 if unknown
	int32 available = 3;

	reserved 4 to 10;
}

message OccupiedCell {
	option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        example: '{"domain": "buyout", "transaction": "bdb1971335e44be6b29a0733e58c8a24" }';
    };

	// Domain in which the cell is occupied
	string domain = 1;
	// Unique cell operation
	string transaction = 2;

	reserved 3 to 5;
}
openapi: 3.0.0
info:
  title: Goldex Robot API
  description: The API is Goldex Robot side API business backend should call to. Actual servers are omitted for security reason.
  version: '1.0'
  contact:
    name: Docs at Github
    url: 'https://github.com/goldexrobot/core.integration.backend'
tags:
  - name: bot
    description: Bots state and control
  - name: photo
    description: Photos downloading
  - name: price
    description: Metal prices
paths:
  '/bots':
    get:
      summary: Available bots
      description: List of bots **currently** available for the current project/integration. The list is not fixed as a bot can be moved to another project
      operationId: getBots
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotInfoList'
        'default':
          $ref: '#/components/responses/Error'
      tags:
        - bot
  '/bots/{botID}':
    parameters:
      - $ref: '#/components/parameters/BotID'
    get:
      summary: Bot info
      description: Bot description by ID
      operationId: getBot
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotInfo'
        'default':
          $ref: '#/components/responses/Error'
      tags:
        - bot
  '/bots/{botID}/command':
    parameters:
      - $ref: '#/components/parameters/BotID'
    post:
      summary: Send a command
      operationId: sendBotCommand
      responses:
        '200':
          $ref: '#/components/responses/Success'
        'default':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotCommand'
        description: Command to perform
        required: true
      tags:
        - bot
      description: Send a command to the bot
  '/bots/{botID}/storage':
    parameters:
      - $ref: '#/components/parameters/BotID'
    get:
      summary: Storage state
      description: Describes current state of the storage of the bot
      operationId: getBotStorage
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotStorageState'
        'default':
          $ref: '#/components/responses/Error'
      tags:
        - bot
  '/photos/{photoID}':
    parameters:
      - $ref: '#/components/parameters/PhotoID'
    get:
      summary: Get photo content
      description: Returns a content of the photo taken by the bot
      operationId: getPhoto
      responses:
        '200':
          description: Image bytes with a corresponding `Content-Type` header
        'default':
          $ref: '#/components/responses/Error'
      tags:
        - photo
  '/prices/lme/{metal}':
    parameters:
      - name: 'metal'
        in: path
        description: Metal (`au` for gold, `ag` for silver, etc.)
        required: true
        schema:
          description: Metal
          type: string
          example: au
          minLength: 2
          maxLength: 2
          enum:
            - au
            - ag
    get:
      summary: London Metal Exchange
      description: Returns a metal current price **per gram** trading at [London Metal Exchange](https://www.lme.com/)
      operationId: getPriceLME
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetalPrice'
        'default':
          $ref: '#/components/responses/Error'
      tags:
        - price
components:
  schemas:
    APIResponse:
      description: General API response
      type: object
      properties:
        'code':
          type: integer
          format: int32
          description: 0 for success, other for error
          example: 1
        'message':
          type: string
          example: Message or error description
    BotInfo:
      description: Bot info data
      type: object
      properties:
        'id':
          type: integer
          format: uint64
          description: Bot ID
          example: 42
        'serial':
          type: string
          description: Serial number
          example: CB-616
    BotInfoList:
      description: List of bot infos
      type: array
      items:
        $ref: '#/components/schemas/BotInfo'
    BotCommand:
      description: Command to send to the bot
      type: object
      properties:
        'name':
          type: string
          description: Predefined command name
          enum:
            - unknown
            - mode_out_of_service
            - mode_operational
            - stop_alarm
            - power_off
          example: mode_operational
    BotStorageState:
      description: Storage state description
      type: object
      properties:
        'occupiedCells':
          description: Occupied cells
          type: array
          items:
            description: Cell state
            type: object
            properties:
              'cell':
                description: Cell address
                type: string
                example: A9
              'domain':
                description: Occupation domain/flow
                type: string
                example: buyout
        'total':
          description: Total available cells (-1 if unknown)
          type: integer
          format: int32
          example: -1
        'available':
          description: Available/free cells (-1 if unknown)
          type: integer
          format: int32
          example: -1
    MetalPrice:
      description: Metal price in fiat currencies
      type: array
      items:
        description: Price in currency
        type: object
        properties:
          'cur':
            description: Currency according to ISO 4217
            type: string
            example: USD
          'val':
            description: Value with 2 decimal places
            type: string
            example: 13.37
  parameters:
    BotID:
      name: 'botID'
      in: path
      description: Bot ID
      required: true
      schema:
        type: integer
        format: uint64
        example: 42
    PhotoID:
      name: 'photoID'
      in: path
      description: Photo/file ID
      required: true
      schema:
        type: string
        format: uuid
        minLength: 32
        maxLength: 32
        pattern: '^[0-9abcdef]{32}$'
        example: dafc61a8277b44a3a8dedf197a862783
  responses:
    Success:
      description: API successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
    Error:
      description: API error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
  links: {}
  callbacks: {}
  securitySchemes:
    http:
      description: 'Basic HTTP auth: project login and secret'
      type: http
      scheme: basic
security:
  - http: []
servers:
  - url: 'https://example.com/v1'
    description: 'Example API base'

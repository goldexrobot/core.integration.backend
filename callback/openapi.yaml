openapi: 3.0.0
info:
  title: Business API (callbacks)
  description: 'The scheme describes business backend API (callbacks). Goldex core backend calls the API during a bot operation (item evaluation, storage management). <br><br> Please navigate to the Goldex dashbaord to turn on the callbacks invocation. <br><br> Goldex [signs](https://github.com/goldexrobot/core.integration.backend/#signing) callbacks it sends with extended JWT which includes even a hash of the request body. The verification might be a complex thing, however a callback **SHOULD BE** verified at least at the basic level &mdash; JWT validation including issuance and expiration time, issuer name and recipient (project id). You are (developer) is fully responsible for the security. <br><br> A callback is successful if it responds to the Goldex backend with HTTP **status 200**'
  version: '1.0'
  contact:
    name: Docs at Github
    url: 'https://github.com/goldexrobot/core.integration.backend'
tags:
  - name: eval
    description: 'Evaluation callbacks are **optional**'
  - name: storage
    description: 'Storage events are <u>**mandatory**</u>'
paths:
  '/eval/started':
    post:
      summary: Evaluation is starting
      description: 'Evaluation start is initiated by the UI of the robot. <br><br>**Response of the callback affects the evaluation**: in case of error response the evaluation will be rejected by Goldex and the UI`s attempt will fail.'
      operationId: evalStarted
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/EvalStarted'
      responses:
        '200':
          description: Success (allow to start the evaluation)
          content:
            application/json:
              schema:
                type: object
                example: {}
        'default':
          description: Error (deny the evaluation)
          content:
            application/json:
              schema:
                type: object
                example: {}
      tags:
        - eval
  '/eval/photo':
    post:
      summary: A new photo of the item/customer is available
      description: Bot takes several photos during the item evaluation. The photos could help to decide to accept or reject the valuable at business side.
      operationId: evalPhoto
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/EvalPhoto'
      responses:
        'default':
          $ref: '#/components/responses/Whatever'
      tags:
        - eval
  '/eval/cancelled':
    post:
      summary: Evaluation is cancelled or failed
      description: Customer has interrupted the evaluation process or some hardware has failed.
      operationId: evalCancelled
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/EvalCancelled'
      responses:
        'default':
          $ref: '#/components/responses/Whatever'
      tags:
        - eval
  '/eval/finished':
    post:
      summary: Evaluation is successfully finished
      description: All the evaluation measurements are done and the control is passed to the business backend.
      operationId: evalFinished
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/EvalFinished'
      responses:
        'default':
          $ref: '#/components/responses/Whatever'
      tags:
        - eval
  '/storage/occupied':
    post:
      summary: Cell has been occupied
      description: 'Cell is occupied in one of domain/flow: UI flows like buyout/pawnshop or internal flow (on-board bot dashboard)'
      operationId: storageOccupied
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/StorageCellEvent'
      responses:
        'default':
          $ref: '#/components/responses/Whatever'
      tags:
        - storage
  '/storage/relesed':
    post:
      summary: Cell has been released
      description: 'Cell is released in one of domain/flow: UI flows like shop/pawnshop or internal flow (on-board bot dashboard)'
      operationId: storageReleased
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/StorageCellEvent'
      responses:
        'default':
          $ref: '#/components/responses/Whatever'
      tags:
        - storage
  '/storage/can_occupy':
    post:
      summary: Cell is going to be occupied (optional)
      description: Before the storage cell will be occupied with an item (in any domain/flow) this **optional** callback might be called, thus it gives a fine control over storage management.
      operationId: storageCanOccupy
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/StorageCellEvent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  'allowed':
                    description: Allow the occupation
                    type: boolean
        'default':
          description: Error (forbids the cell occupation)
          content:
            application/json:
              schema:
                type: object
                example: {}
      tags:
        - storage
  '/storage/can_release':
    post:
      summary: Cell is going to be released (optional)
      description: Before the storage cell will be released (in any domain/flow) this **optional** callback might be called, thus it gives a fine control over storage management.
      operationId: storageCanRelease
      parameters: 
        - $ref: '#/components/parameters/ProjectID'
        - $ref: '#/components/parameters/BotID'
      requestBody:
        $ref: '#/components/requestBodies/StorageCellEvent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  'allowed':
                    description: Allow the release
                    type: boolean
        'default':
          description: Error (forbids the cell release)
          content:
            application/json:
              schema:
                type: object
                example: {}
      tags:
        - storage
components:
  schemas: {}
  parameters:
    BotID:
      description: Bot ID
      name: 'X-CBOT-BOT-ID'
      in: header
      required: false
      schema:
        type: integer
        format: uint64
        example: 42
    ProjectID:
      description: Project ID
      name: 'X-CBOT-PROJECT-ID'
      in: header
      required: false
      schema:
        type: integer
        format: uint64
        example: 1
  requestBodies:
    EvalStarted:
      content:
        'application/json':
          schema:
            type: object
            properties:
              project_id:
                description: Project ID
                type: integer
                format: uint64
                example: 1
              bot_id:
                description: Bot ID
                type: integer
                format: uint64
                example: 42
              eval_id:
                description: Evaluation ID
                type: integer
                format: uint64
                example: 1337
    EvalPhoto:
      content:
        'application/json':
          schema:
            type: object
            properties:
              project_id:
                description: Project ID
                type: integer
                format: uint64
                example: 1
              bot_id:
                description: Bot ID
                type: integer
                format: uint64
                example: 42
              eval_id:
                description: Evaluation ID
                type: integer
                format: uint64
                example: 1337
              origin:
                description: An origin the photo comes from. `item` is the item photo,
                  `outer` - photo from the outer camera
                type: string
                example: item
                enum: 
                  - item
                  - outer
              photo_id:
                description: File ID
                type: string
                example: 3dd321739a694bbab93d7aae360a4ab4
              preview_id:
                description: File ID
                type: string
                example: eef30f5dc98e4c7d8d2f8df9df56c0d0
    EvalCancelled:
      content:
        'application/json':
          schema:
            type: object
            properties:
              project_id:
                description: Project ID
                type: integer
                format: uint64
                example: 1
              bot_id:
                description: Bot ID
                type: integer
                format: uint64
                example: 42
              eval_id:
                description: Evaluation ID
                type: integer
                format: uint64
                example: 1337
              reason:
                description: Cancellation reason
                type: string
                example: 'empty_spectrum'
                enum:
                  - rejected
                  - cancelled
                  - progress
                  - broken
                  - xrf_aim
                  - empty_spectrum
                  - low_spectrum
                  - unstable_scale
                  - weight_low
                  - weight_high
                  - wet_weight_low
                  - wet_weight_high
                  - invalid_density
                  - ...
    EvalFinished:
     content:
      'application/json':
        schema:
          type: object
          properties:
            project_id:
              description: Project ID
              type: integer
              format: uint64
              example: 1
            bot_id:
              description: Bot ID
              type: integer
              format: uint64
              example: 42
            eval_id:
              description: Evaluation ID
              type: integer
              format: uint64
              example: 1337
            alloy:
              description: Detected primary metal/alloy
              type: string
              example: au
              enum:
                - au
                - ag
                - ...
            alloy_content:
              description: Content of the metal in spectrum in percents
              type: number
              format: double
              example: 99.98
            confidence:
              description: 'Overall result confidence/score [0..1], where 1 - is fully confident result and a value below 0.8 is alarming.'
              type: number
              format: double
              example: 0.889
            fineness_carat:
              description: Detected fineness in carats
              type: string
              example: 24K
            fineness_millesimal:
              description: 'Detected millesimal fineness. Example: 585 stands for 58.5%, 999 for 99.9%, 9999 for 99.99%'
              type: integer
              format: int64
              example: 9999
            fineness_purity:
              description: Detected fineness purity in percents
              type: number
              format: double
              example: 99.99
            risky:
              description: Goldex decision about the evaluation
              type: boolean
              example: false
            spectrum:
              description: Spectrum data (variable list of elements)
              type: object
              additionalProperties:
                type: number
                format: double
              example:
                au: 99.98
            warnings:
              description: 'Warnings that should help with decision. Usually it is risky to accept the item if a warning is presented'
              type: array
              items:
                type: string
              example:
                - tungsten_in_gold
            weight:
              description: Item weight in grams
              type: number
              format: double
              example: 3.141
    StorageCellEvent:
      content:
        'application/json':
          schema:
            type: object
            properties:
              project_id:
                description: Project ID
                type: integer
                format: uint64
                example: 1
              bot_id:
                description: Bot ID
                type: integer
                format: uint64
                example: 42
              cell:
                description: Cell address
                type: string
                example: A1
              domain:
                description: Origin of the event in terms of (UI) flow
                type: string
                example: buyout
                enum:
                  - buyout
                  - shop
                  - pawnshop
                  - dashboard
                  - collection
                  - other
              transaction:
                description: Unique ID of the cell changing operation
                type: string
                example: 240702e1e8be42d39137c1d802dd6941
  responses:
    Whatever:
      description: Whatever
      content:
        application/json:
          schema:
            type: object
            example: {}
    Success:
      description: Success
      content:
        application/json:
          schema:
            type: object
            example: {}
    Error:
      description: Error
      content:
        application/json:
          schema:
            type: object
            example: {}
  links: {}
  callbacks: {}
  securitySchemes: {}
security: [{}]
servers:
  - url: 'http://localhost:8000/goldex'
    description: 'Dev backend'
    